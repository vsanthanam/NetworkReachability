{"sections":[],"abstract":[{"type":"text","text":"Learn how to use Reaachability Monitor APIs"}],"hierarchy":{"paths":[["doc:\/\/NetworkReachability\/documentation\/NetworkReachability"]]},"metadata":{"roleHeading":"Article","title":"Reachability Monitor Programming Guide","modules":[{"name":"NetworkReachability"}],"role":"article"},"primaryContentSections":[{"content":[{"text":"Overview","level":2,"anchor":"Overview","type":"heading"},{"inlineContent":[{"text":"The easiest way use ","type":"text"},{"identifier":"doc:\/\/NetworkReachability\/documentation\/NetworkReachability\/ReachabilityMonitor","isActive":true,"type":"reference"},{"type":"text","text":" is to use its static "},{"type":"codeVoice","code":"reachability"},{"type":"text","text":" property"}],"type":"paragraph"},{"code":["import NetworkReachability","","do {","    let reachability = try ReachabilityMonitor.reachability","    \/\/ Do something with `reachability`","} catch {","    \/\/ Handle errors","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"Unlike "},{"identifier":"doc:\/\/NetworkReachability\/documentation\/NetworkReachability\/NetworkMonitor","type":"reference","isActive":true},{"text":", ","type":"text"},{"type":"reference","identifier":"doc:\/\/NetworkReachability\/documentation\/NetworkReachability\/ReachabilityMonitor","isActive":true},{"text":"’s synchronous API is gauranteed to provide up-date-values.","type":"text"}],"type":"paragraph"},{"type":"heading","level":3,"text":"Observing reachability updates","anchor":"Observing-reachability-updates"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you need to observe all reachability changes, "},{"type":"reference","isActive":true,"identifier":"doc:\/\/NetworkReachability\/documentation\/NetworkReachability\/ReachabilityMonitor"},{"text":" provides several asynchronous APIs that will allow you to integrate reachability data into any existing pipeline.","type":"text"}]},{"text":"Closures","level":5,"type":"heading","anchor":"Closures"},{"type":"paragraph","inlineContent":[{"text":"You can use a closure to observe reachability over time. You can pass in the closure on initialization, or add one later using the ","type":"text"},{"type":"codeVoice","code":"updateHandler"},{"text":" property. The closure returns result types, which means they could contain errors instead of values.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["import NetworkReachability","","final class MyClass {","","    var monitor: ReachabilityMonitor?","","    func startMonitoring() {","        stopMonitoring()","        monitor = ReachabilityMonitor(updateHandler: { (monitor: ReachabilityMonitor, result: ReachabilityMonitor.Result) in","            do {","                let reachability = try result.get()","                \/\/ Do something with `monitor` or `reachability`","            } catch {","                \/\/ Handle error","            }","        }","    }","","    func stopMonitoring() {","        monitor = nil","    }","","}"]},{"content":[{"inlineContent":[{"text":"By default, instances of ","type":"text"},{"isActive":true,"identifier":"doc:\/\/NetworkReachability\/documentation\/NetworkReachability\/ReachabilityMonitor","type":"reference"},{"text":" always call their update handlers on the main thread. You can change this behavior by setting the monitor’s ","type":"text"},{"code":".updateQueue","type":"codeVoice"},{"type":"text","text":" property."}],"type":"paragraph"}],"type":"aside","name":"Important","style":"important"},{"level":5,"text":"Swift Concurrency","type":"heading","anchor":"Swift-Concurrency"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can use an "},{"type":"codeVoice","code":"AsyncSequence"},{"text":" to observe reachability updates over time using Swift Concurrency","type":"text"}]},{"type":"codeListing","code":["import NetworkReachability","","final class MyClass {","    ","    var monitorTask: Task?","","    func startObserving() {","        stopObserving()","        monitorTask = Task {","            do {","                for try await reachability in ReachabilityMonitor.reachabilityMonitorUpdates {","                    \/\/ Do something with `reachability`","                }","            } catch {","                \/\/ Handle error","            }","        }","    }","","    func startObserving() {","        monitorTask?.cancel()","        monitorTask = nil","    }","}"],"syntax":"swift"},{"type":"aside","style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"This API requires iOS 13, macOS 10.15, tvOS 13, or watchOS 6"}]}],"name":"Note"},{"level":5,"text":"Delegation","type":"heading","anchor":"Delegation"},{"inlineContent":[{"type":"text","text":"You can use "},{"type":"reference","isActive":true,"identifier":"doc:\/\/NetworkReachability\/documentation\/NetworkReachability\/ReachabilityMonitorDelegate"},{"type":"text","text":" to recieve callbacks when the reachability changes. You can pass in a delegate object when the monitor is initialized, or you can assign one later."}],"type":"paragraph"},{"syntax":"swift","code":["import NetworkReachability","","final class MyClass: ReachabilityMonitorDelegate {","","    var monitor: ReachabilityMonitor?","","    func startMonitoring() {","        stopMonitoring()","        monitor = ReachabilityMonitor(delegate: self)","    }","","    func stopMonitoring() {","        monitor = nil","    }","","    \/\/ MARK: - ReachabilityMonitorDelegate","","    func reachabilityMonitor(_ monitor: ReachabilityMonitor, didUpdateReachability reachability: Reachability)","        \/\/ Do something with `reachability`","    }","","    func reachabilityMonitor(_ monitor: ReachabilityMonitor, didFailWithError error: Error) {","        \/\/ Handle error","    }","","}"],"type":"codeListing"},{"name":"Important","style":"important","type":"aside","content":[{"type":"paragraph","inlineContent":[{"text":"By default, instances of ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/NetworkReachability\/documentation\/NetworkReachability\/ReachabilityMonitor"},{"text":" always execute their delegate callbacks on the main thread. You can change this behavior by setting the monitor’s ","type":"text"},{"type":"codeVoice","code":".updateQueue"},{"type":"text","text":" property."}]}]},{"type":"heading","level":5,"anchor":"NotificationCenter","text":"NotificationCenter"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you have retained an instance of "},{"identifier":"doc:\/\/NetworkReachability\/documentation\/NetworkReachability\/ReachabilityMonitor","isActive":true,"type":"reference"},{"text":" in memory, but do not have access to it in the part of your code that needs reachability updates, you can","type":"text"},{"type":"text","text":" "},{"text":"observe reachability changes by observing notifications with the name ","type":"text"},{"type":"codeVoice","code":"Notification.Name.reachabilityChanged"},{"type":"text","text":" on the default notification center. The notification’s "},{"type":"codeVoice","code":".object"},{"type":"text","text":" property will contain the "},{"type":"reference","identifier":"doc:\/\/NetworkReachability\/documentation\/NetworkReachability\/ReachabilityMonitor","isActive":true},{"type":"text","text":". From there, you can use "},{"type":"codeVoice","code":"currentReachability"},{"text":" property of the monitor, which you now know will be up-to-date thanks to the notification.","type":"text"}]},{"syntax":"swift","code":["import Foundation","import NetworkReachability","","final class MyClass {","","    var monitor: ReachabilityMonitor?","","    func startMonitoring() {","        stopMonitoring()","        NotificationCenter.default.addObserver(self, selector: #selector(handleUpdate:), name: .reachabilityhChanged)","        monitor = ReachabilityMonitor()","    }","","    func stopMonitoring() {","        monitor = nil","        NotificationCenter.default.removeObserver(self, name: .reachabilityChanged)","    }","","    @objc","    func handleUpdate(_ notification: Notification) {","        guard let monitor = notification.object as? ReachabilityMonitor else {","            return","        }","        do {","            let reachability = try monitor.currentReachability","        } catch {","            \/\/ Do something with `reachability`","        }","    }","","    deinit {","        NotificationCenter.default.removeObserver(self, name: .reachabilityChanged)","    }","","}"],"type":"codeListing"},{"style":"important","name":"Important","content":[{"inlineContent":[{"text":"By default, instances of ","type":"text"},{"type":"reference","identifier":"doc:\/\/NetworkReachability\/documentation\/NetworkReachability\/ReachabilityMonitor","isActive":true},{"type":"text","text":" always post their notifications on the main thread. You can change this behavior by setting the monitor’s "},{"code":".updateQueue","type":"codeVoice"},{"type":"text","text":" property."}],"type":"paragraph"}],"type":"aside"},{"text":"Combine","level":5,"anchor":"Combine","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can observe reachability changes using a "},{"type":"reference","identifier":"https:\/\/developer.apple.com\/documentation\/combine","isActive":true},{"text":" with the ","type":"text"},{"type":"codeVoice","code":"reachabilityPublisher"},{"type":"text","text":" static property."}]},{"syntax":"swift","type":"codeListing","code":["import Combine","import NetworkReachability","","final class MyClass {","    ","    var monitorCancellable: AnyCancellable?","","    func startObserving() {","        stopObserving()","        monitorCancellable = ReachabilityMonitor.reachabilityPublisher","            .map(\\.status.isReachable)","            .replaceError(with: false)","            .sink { isReachable in","                \/\/ Do something with `isReachable`","            }","    }","","    func startObserving() {","        monitorCancellable?.cancel()","        monitorCancellable = nil","    }","","    deinit {","        monitorCancellable?.cancel()","    }","}"]},{"type":"aside","style":"note","content":[{"type":"paragraph","inlineContent":[{"text":"This API requires iOS 13, macOS 10.15, tvOS 13, or watchOS 6","type":"text"}]}],"name":"Note"}],"kind":"content"}],"seeAlsoSections":[{"identifiers":["doc:\/\/NetworkReachability\/documentation\/NetworkReachability\/ReachabilityMonitor","doc:\/\/NetworkReachability\/documentation\/NetworkReachability\/ReachabilityMonitorDelegate","doc:\/\/NetworkReachability\/documentation\/NetworkReachability\/Reachability"],"generated":true,"title":"Reachability Monitor"}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/NetworkReachability\/documentation\/NetworkReachability\/ReachabilityMonitorGuide"},"schemaVersion":{"major":0,"minor":3,"patch":0},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/networkreachability\/reachabilitymonitorguide"]}],"kind":"article","references":{"https://developer.apple.com/documentation/combine":{"titleInlineContent":[{"text":"Combine","type":"text"}],"title":"Combine","type":"link","url":"https:\/\/developer.apple.com\/documentation\/combine","identifier":"https:\/\/developer.apple.com\/documentation\/combine"},"doc://NetworkReachability/documentation/NetworkReachability":{"abstract":[{"text":"A Swift replacement for ","type":"text"},{"type":"codeVoice","code":"SCNetworkReachability"},{"type":"text","text":" & "},{"type":"codeVoice","code":"NWPathMonitor"},{"text":" with support for structured concurrency.","type":"text"}],"role":"collection","url":"\/documentation\/networkreachability","identifier":"doc:\/\/NetworkReachability\/documentation\/NetworkReachability","type":"topic","title":"NetworkReachability","kind":"symbol"},"doc://NetworkReachability/documentation/NetworkReachability/ReachabilityMonitor":{"type":"topic","url":"\/documentation\/networkreachability\/reachabilitymonitor","navigatorTitle":[{"kind":"identifier","text":"ReachabilityMonitor"}],"identifier":"doc:\/\/NetworkReachability\/documentation\/NetworkReachability\/ReachabilityMonitor","abstract":[{"text":"A class used to observe network reachability changes","type":"text"}],"fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"text":"ReachabilityMonitor","kind":"identifier"}],"role":"symbol","kind":"symbol","title":"ReachabilityMonitor"},"doc://NetworkReachability/documentation/NetworkReachability/NetworkMonitor":{"role":"symbol","kind":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"text":"NetworkMonitor","kind":"identifier"}],"title":"NetworkMonitor","navigatorTitle":[{"kind":"identifier","text":"NetworkMonitor"}],"abstract":[{"type":"text","text":"A class used to observe network path changes"}],"url":"\/documentation\/networkreachability\/networkmonitor","identifier":"doc:\/\/NetworkReachability\/documentation\/NetworkReachability\/NetworkMonitor"},"doc://NetworkReachability/documentation/NetworkReachability/ReachabilityMonitorDelegate":{"role":"symbol","type":"topic","identifier":"doc:\/\/NetworkReachability\/documentation\/NetworkReachability\/ReachabilityMonitorDelegate","abstract":[{"text":"A protocol used to observe network reachability changes from a ","type":"text"},{"type":"reference","identifier":"doc:\/\/NetworkReachability\/documentation\/NetworkReachability\/ReachabilityMonitor","isActive":true}],"navigatorTitle":[{"kind":"identifier","text":"ReachabilityMonitorDelegate"}],"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"ReachabilityMonitorDelegate","kind":"identifier"}],"kind":"symbol","url":"\/documentation\/networkreachability\/reachabilitymonitordelegate","title":"ReachabilityMonitorDelegate"},"doc://NetworkReachability/documentation/NetworkReachability/Reachability":{"title":"Reachability","navigatorTitle":[{"text":"Reachability","kind":"identifier"}],"identifier":"doc:\/\/NetworkReachability\/documentation\/NetworkReachability\/Reachability","role":"symbol","url":"\/documentation\/networkreachability\/reachability","abstract":[{"type":"text","text":"A value type representing network reachability"}],"type":"topic","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Reachability","kind":"identifier"}]}}}